[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
authors = [
  {name = "Josh", email = "josh@joshthomas.dev"},
]
classifiers = [
  "Development Status :: 4 - Beta",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
]
dependencies = [
  "django>=3.2",
  "django_q2>=1.4.3",
]
description = "A Django app to register Django Q tasks."
dynamic = ["version"]
keywords = []
license = "MIT"
name = "django-q-registry"
readme = "README.md"
requires-python = ">=3.8"

[project.optional-dependencies]
dev = [
  "black",
  "coverage[toml]",
  "hatch",
  "mypy",
  "nox",
  "pytest",
  "pytest-django",
  "pytest-xdist",
  "ruff",
]

[project.urls]
Documentation = "https://github.com/joshuadavidthomas/django-q-registry#readme"
Issues = "https://github.com/joshuadavidthomas/django-q-registry/issues"
Source = "https://github.com/joshuadavidthomas/django-q-registry"

[tool.hatch.version]
path = "src/django_q_registry/__init__.py"

[tool.black]
line-length = 120
skip-string-normalization = true
target-version = ["py38"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.coverage.run]
source = ["."]


[tool.mypy]
ignore_missing_imports = true
mypy_path = "src/"
namespace_packages = false
show_error_codes = true
strict = true
warn_unreachable = true

[[tool.mypy.overrides]]
allow_untyped_defs = true
module = "tests.*"

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "tests.settings"
django_find_project = false
pythonpath = ". src"
python_files = "tests.py test_*.py *_tests.py"

[tool.ruff]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027", # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003", # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107", # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
]
line-length = 120
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
target-version = "py38"
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
force-single-line = true
known-first-party = ["django_q_registry"]
required-imports = ["from __future__ import annotations"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]
